AWSTemplateFormatVersion: 2010-09-09
Description: Spoke stack that connects to central infrastructure

Parameters:
  VpcCIDR:
    Description: CIDR block for the Spoke VPC
    Type: String
    Default: 10.20.0.0/20
    MinLength: 9
    MaxLength: 18
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}\/([0-9]|[1-2][0-9]|3[0-2])$
    ConstraintDescription: Must be a valid IP CIDR block like x.x.x.x/x

  Subnet1CIDR:
    Description: CIDR block for the first subnet
    Type: String
    Default: 10.20.0.0/24

  Subnet2CIDR:
    Description: CIDR block for the second subnet
    Type: String
    Default: 10.20.1.0/24

  SpokeName:
    Description: Logical name for the spoke (e.g. Trust1)
    Type: String

  CentralVPCId:
    Description: The VPC ID of the central network to peer with
    Type: String

  CentralVPCCIDR:
    Description: CIDR block of the central VPC
    Type: String

  DeployedByTag:
    Description: Tag for who deployed the resources
    Type: String
    Default: Muaaz

Resources:
  SpokeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub SpokeVPC-${SpokeName}
        - Key: managed-by
          Value: CloudFormation
        - Key: deployed-by
          Value: !Ref DeployedByTag

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SpokeVPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref Subnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet1
        - Key: managed-by
          Value: CloudFormation
        - Key: deployed-by
          Value: !Ref DeployedByTag

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SpokeVPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref Subnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Subnet2
        - Key: managed-by
          Value: CloudFormation
        - Key: deployed-by
          Value: !Ref DeployedByTag

  SpokeInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${SpokeName}-igw"
        - Key: managed-by
          Value: CloudFormation
        - Key: deployed-by
          Value: !Ref DeployedByTag

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SpokeVPC
      InternetGatewayId: !Ref SpokeInternetGateway

  SpokeRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SpokeVPC
      Tags:
        - Key: Name
          Value: !Sub "${SpokeName}-rt"
        - Key: managed-by
          Value: CloudFormation
        - Key: deployed-by
          Value: !Ref DeployedByTag

  DefaultRouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref SpokeRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SpokeInternetGateway

  RouteToCentralVPC:
    Type: AWS::EC2::Route
    DependsOn: VPCPeeringConnection
    Properties:
      RouteTableId: !Ref SpokeRouteTable
      DestinationCidrBlock: !Ref CentralVPCCIDR
      VpcPeeringConnectionId: !Ref VPCPeeringConnection

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref SpokeRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref SpokeRouteTable

  SpokeEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${SpokeName}-EC2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  SpokeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref SpokeEC2Role

  SpokeInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from the load balancer
      VpcId: !Ref SpokeVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SpokeLoadBalancerSG
      Tags:
        - Key: Name
          Value: !Sub "${SpokeName}-Instance-SG"
        - Key: managed-by
          Value: CloudFormation

  SpokeLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTP (80) from Answer Office IP
      VpcId: !Ref SpokeVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 203.0.113.0/24  # Replace with real Answer office IP
      Tags:
        - Key: Name
          Value: !Sub "${SpokeName}-LB-SG"
        - Key: managed-by
          Value: CloudFormation

  SpokeInstance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref Subnet1
      ImageId: ami-0b9dd1f70861d4721
      IamInstanceProfile: !Ref SpokeInstanceProfile
      SecurityGroupIds:
        - !Ref SpokeInstanceSG
      Tags:
        - Key: Name
          Value: !Sub "${SpokeName}-Instance1"
        - Key: managed-by
          Value: CloudFormation
        - Key: deployed-by
          Value: !Ref DeployedByTag

  SpokeInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId: !Ref Subnet2
      ImageId: ami-0b9dd1f70861d4721
      IamInstanceProfile: !Ref SpokeInstanceProfile
      SecurityGroupIds:
        - !Ref SpokeInstanceSG
      Tags:
        - Key: Name
          Value: !Sub "${SpokeName}-Instance2"
        - Key: managed-by
          Value: CloudFormation
        - Key: deployed-by
          Value: !Ref DeployedByTag

  SpokeLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${SpokeName}-LB"
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref SpokeLoadBalancerSG
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: !Sub "${SpokeName}-ALB"
        - Key: managed-by
          Value: CloudFormation

  SpokeTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${SpokeName}-TG"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref SpokeVPC
      TargetType: instance
      HealthCheckPath: /
      Matcher:
        HttpCode: 200
      Targets:
        - Id: !Ref SpokeInstance1
          Port: 80
        - Id: !Ref SpokeInstance2
          Port: 80

  SpokeListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref SpokeLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SpokeTargetGroup

  VPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId: !Ref SpokeVPC
      PeerVpcId: !Ref CentralVPCId
      Tags:
        - Key: Name
          Value: !Sub "${SpokeName}-to-CentralPeering"
        - Key: managed-by
          Value: CloudFormation
        - Key: deployed-by
          Value: !Ref DeployedByTag

Outputs:
  VPCId:
    Description: Spoke VPC ID
    Value: !Ref SpokeVPC
